package USER.services.bpm;

import com.jacada.jad.bpm.BPMConnector;
import com.jacada.jad.bpm.BPMTask;

/**
 * @author arotstein
 * WorkSpace - Intalio|BPM Integration : the following code is used to
 * initialize the connection between Jacada WorkSpace and Intalio|BPM. Uncomment
 * the following code and replace the following variables:
 * <webServiceLocator> - the service locator used to obtain the service stub
 * (generated by the web service client wizard) 
 * <webServiceSoap> - the service interface (also generated by the wizard)
 */
public class BPMConnectorImpl implements BPMConnector {

	/**
	 * 
	 */
	private static final long	serialVersionUID	= 1L;

	/**
	 * 
	 */
	
	/**************************************    Uncomment this section
	private <webServiceSoap>			intalioService;
	//for example private Workflow			intalioService;

	public <webServiceSoap> getIntalioService() {
		return intalioService;
	}
	**/

	public boolean addTask(BPMTask task) {
		return false;
		/** 
		 * 
		 *										Uncomment this section for weblogic
		 * *****************************************************Weblogic Start************************************************
		 *
		<webServiceLocator> locator = new <webServiceLocator>();
		//for example WorkflowSoapServiceLocator locator = new WorkflowSoapServiceLocator();
		locator.setPAPortEndpointAddress("http://<BPM Server Host>:8080/fds/workflow/PA");


		try {
			
			BPMTaskImpl taskImpl = (BPMTaskImpl) task;

			// injecting the BPMTaskImpl fields into the TaskMetaDataType
			//*****************************************************************************************************************
			 
			String[] arrStr = new String[] { taskImpl.getAssigneeUser() };
			String[] arrStr1 = new String[] { taskImpl.getAssigneeRole() };
			TaskMetaDataType myTask = new TaskMetaDataType();
			myTask.setDescription(taskImpl.getTitle());
			myTask.setUserOwner(arrStr);
			myTask.setTaskState(new org.apache.axis.types.Token(taskImpl
					.getStatus()));
			myTask.setPriority(taskImpl.getPriority());
			Calendar cal = Calendar.getInstance();
			cal.setTime(taskImpl.getCreationDate());
			myTask.setCreationDate(cal);
			myTask.setRoleOwner(arrStr1);
			
			TaskMetaDataTypeScheduledActions scheduledActions = new TaskMetaDataTypeScheduledActions();
			ScheduledActionsDetails expiration = new ScheduledActionsDetails();
			Calendar expCal = Calendar.getInstance();
			//When both an expirationDate and a duration are provided, the expirationDate prevails
			if(taskImpl.getExpirationDate() == null){
				//use duration
				if (taskImpl.getDuration() != null){
					//format of duration is PnYnMnDTnHnMnS, The capital letters are delimiters and can be omitted when the corresponding member isn't used
					//P and T must be present for example PT2M10S means 2 minutes and 10 seconds
					org.apache.axis.types.Duration d = new org.apache.axis.types.Duration(taskImpl.getDuration());
					expiration.set_for(d);
				}
			} else {
				//use expiration
				expCal.setTime(taskImpl.getExpirationDate());
				expiration.setUntil(expCal);
			}
			scheduledActions.setExpiration(expiration);
			ScheduledActionsDetails deferActivation = new ScheduledActionsDetails();
			scheduledActions.setDeferActivation(deferActivation);
			myTask.setScheduledActions(scheduledActions);

			//***************************************************************************************************************** 
			//fields set by default for People Activity
			// should be changed at project level to match the process
			myTask.setFormUrl(new org.apache.axis.types.URI(
					"oxf://PeopleActivity/PA.xform"));
			myTask
					.setUserProcessCompleteSOAPAction("http://www.intalio.com/bpms/workflow/xforms/PeopleActivity/PA/Process/notifyTaskCompletion");
			myTask
					.setUserProcessEndpoint("http://<BPM ServerHost>:8080/ode/processes/PeopleActivity/PA/PA/Start/WFmagic_cksXMrobEd2Fe4Kb1Aqw9Q");
			myTask
					.setUserProcessNamespaceURI("http://www.intalio.com/bpms/workflow/xforms/PeopleActivity/PA");

			//***************************************************************************************************************** 
			// fields to be added\changed at project level if needed, the
			// BPMTaskImpl default impl does not include those fields
			myTask.setProcessId("");
			myTask.setPreviousTaskId("");
			myTask.setFailureCode("");
			myTask.setFailureReason("");
			myTask.setTaskId("");
			myTask.setTaskType(new org.apache.axis.types.Token(""));
			AccessControlType claimAction = new AccessControlType();
			AccessControlType revokeAction = new AccessControlType();
			AccessControlType saveAction = new AccessControlType();
			AccessControlType completeAction = new AccessControlType();
			myTask.setClaimAction(claimAction);
			myTask.setRevokeAction(revokeAction);
			myTask.setSaveAction(saveAction);
			myTask.setCompleteAction(completeAction);

			// get service stub
			intalioService = locator.getPAPort();
			Input request = new Input("please accept this workspace task");
			CreateTaskRequestTaskInput taskInput = new CreateTaskRequestTaskInput(
					request);
			CreateTaskRequest intalioTask = new CreateTaskRequest(myTask,
					"token", taskInput);
			// invoke operation
			intalioService.createTask(intalioTask);

		}
		catch(java.rmi.RemoteException remoteEx){
			Throwable throwable = remoteEx.getCause();
			if(throwable instanceof ConnectException){
				LogWrapper.error("can not add task to intalio, connection is down. Msg:" + ((AxisFault)remoteEx).getFaultString(), remoteEx);
			}
			else if(throwable instanceof SAXException){
				if(((AxisFault)remoteEx).getFaultString().indexOf("deferAction") > 0){
					LogWrapper.error("Task added though got exception. Msg:" + ((AxisFault)remoteEx).getFaultString(), remoteEx);
					return true;
				}
			}
			else {
				LogWrapper.error("Exception while adding task to intalio." , remoteEx);
			}
			return false;
		}
		catch (Exception e) {
			LogWrapper.error("can not add task to intalio", e);
			return false;
		}
		return true;
		*****************************************************Weblogic End**************************************************/
		
		
		/** 
		 * 
		 *										Uncomment this section for Websphere
		 * *****************************************************Websphere Start************************************************
		 * 
		<webServiceLocator> locator = new <webServiceLocator>();
		//for example WorkflowSoapServiceLocator locator = new WorkflowSoapServiceLocator();
		locator.setPAPortEndpointAddress("http://<BPM Server Host>:8080/fds/workflow/PA");
		try {
			
			BPMTaskImpl taskImpl = (BPMTaskImpl) task;

			// injecting the BPMTaskImpl fields into the TaskMetaDataType
			//*****************************************************************************************************************
			 
			String[] arrStr = new String[] { taskImpl.getAssigneeUser() };
			String[] arrStr1 = new String[] { taskImpl.getAssigneeRole() };
			TaskMetaDataType myTask = new TaskMetaDataType();
			myTask.setDescription(taskImpl.getTitle());
			myTask.setUserOwner(arrStr);
			myTask.setTaskState(new org.apache.axis.types.Token(taskImpl
					.getStatus()));
			myTask.setPriority(taskImpl.getPriority());
			Calendar cal = Calendar.getInstance();
			cal.setTime(taskImpl.getCreationDate());
			myTask.setCreationDate(cal);
			myTask.setRoleOwner(arrStr1);
			
			TaskMetaDataTypeScheduledActions scheduledActions = new TaskMetaDataTypeScheduledActions();
			ScheduledActionsDetails expiration = new ScheduledActionsDetails();
			Calendar expCal = Calendar.getInstance();
			//When both an expirationDate and a duration are provided, the expirationDate prevails
			if(taskImpl.getExpirationDate() == null){
				//use duration
				if (taskImpl.getDuration() != null){
					//format of duration is PnYnMnDTnHnMnS, The capital letters are delimiters and can be omitted when the corresponding member isn't used
					//P and T must be present for example PT2M10S means 2 minutes and 10 seconds
					org.apache.axis.types.Duration d = new org.apache.axis.types.Duration(taskImpl.getDuration());
					expiration.set_for(d);
				}
			} else {
				//use expiration
				expCal.setTime(taskImpl.getExpirationDate());
				expiration.setUntil(expCal);
			}
			scheduledActions.setExpiration(expiration);
			ScheduledActionsDetails deferActivation = new ScheduledActionsDetails();
			scheduledActions.setDeferActivation(deferActivation);
			myTask.setScheduledActions(scheduledActions);
			//***************************************************************************************************************** 
			//fields set by default for People Activity
			// should be changed at project level to match the process
			
			myTask.setFormUrl(new org.apache.axis.types.URI("oxf://PeopleActivity/PA.xform"));
			myTask
					.setUserProcessCompleteSOAPAction("http://www.intalio.com/bpms/workflow/xforms/PeopleActivity/PA/Process/notifyTaskCompletion");
			myTask
					.setUserProcessEndpoint("http://<BPM ServerHost>:8080/ode/processes/PeopleActivity/PA/PA/Start/WFmagic_cksXMrobEd2Fe4Kb1Aqw9Q");
			myTask
					.setUserProcessNamespaceURI("http://www.intalio.com/bpms/workflow/xforms/PeopleActivity/PA");

			//***************************************************************************************************************** 
			// fields to be added\changed at project level if needed, the
			// BPMTaskImpl default impl does not include those fields
			myTask.setProcessId("");
			myTask.setPreviousTaskId("");
			myTask.setFailureCode("");
			myTask.setFailureReason("");
			myTask.setTaskId("");
			myTask.setTaskType(new org.apache.axis.types.Token());
			AccessControlType claimAction = new AccessControlType();
			AccessControlType revokeAction = new AccessControlType();
			AccessControlType saveAction = new AccessControlType();
			AccessControlType completeAction = new AccessControlType();
			myTask.setClaimAction(claimAction);
			myTask.setRevokeAction(revokeAction);
			myTask.setSaveAction(saveAction);
			myTask.setCompleteAction(completeAction);
			

			// get service stub
			intalioService = locator.getPAPort();
			Input request = new Input("please accept this workspace task");
			CreateTaskRequestTaskInput taskInput = new CreateTaskRequestTaskInput(
					request);
			CreateTaskRequest intalioTask = new CreateTaskRequest(myTask,
					"token", taskInput);
			// invoke operation
			intalioService.createTask(intalioTask);

		}
		catch(java.rmi.RemoteException remoteEx){
			Throwable throwable = remoteEx.getCause();
			if(throwable instanceof ConnectException){
				LogWrapper.error("can not add task to intalio, connection is down. Msg:" + ((AxisFault)remoteEx).getFaultString(), remoteEx);
			}
			else if(throwable instanceof SAXException){
				if(((AxisFault)remoteEx).getFaultString().indexOf("deferAction") > 0){
					LogWrapper.error("Task added though got exception. Msg:" + ((AxisFault)remoteEx).getFaultString(), remoteEx);
					return true;
				}
			}
			else {
				LogWrapper.error("Exception while adding task to intalio." , remoteEx);
			}
			return false;
		}
		catch (Exception e) {
			LogWrapper.error("can not add task to intalio", e);
			return false;
		}
		return true;
		*****************************************************Websphere End************************************************
		 */
	}
}
