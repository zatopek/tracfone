<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:s="http://www.springframework.org/schema/security"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">
    	
	<s:global-method-security secured-annotations="enabled" access-decision-manager-ref="businessAccessDecisionManager">
    </s:global-method-security>

   
    <s:http auto-config="false" entry-point-ref="authenticationProcessingFilterEntryPoint" 
    		create-session="never" disable-url-rewriting="false"
    		access-decision-manager-ref="businessAccessDecisionManager"
            access-denied-page="/LoginForm.jsp?login_error=2">
                <s:intercept-url pattern="/*.*" access="AgentRole"/>
                <s:intercept-url pattern="/**/*.jsp" access="AgentRole"/>
                <s:intercept-url pattern="/**/*.jpf" access="AgentRole" />
                <s:intercept-url pattern="/**/*.jsf" access="AgentRole" />
                <s:intercept-url pattern="/**/*.faces" access="AgentRole" />
                <s:intercept-url pattern="/**/*.html" access="AgentRole" />
                <s:intercept-url pattern="/**/*.json" access="AgentRole" />
                <s:intercept-url pattern="/**/*.do" access="AgentRole"/>
                <s:intercept-url pattern="/dynamicviews" access="AgentRole"/>
				<s:intercept-url pattern="/dataSource" access="AgentRole"/>
				<s:intercept-url pattern="/LoginForm.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
				<s:intercept-url pattern="/SYSTEM/error.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
				<s:intercept-url pattern="/SYSTEM/errorPage.jsp" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
                <s:form-login default-target-url="/Controller.jpf" login-page="/LoginForm.jsp"
                			  authentication-failure-url="/LoginForm.jsp?login_error=1" 
                			  always-use-default-target="false"  authentication-failure-handler-ref="failureHandler"
                			  authentication-success-handler-ref="successHandler" />
                <s:session-management session-authentication-strategy-ref="sessionCreationStrategy"/>
    		</s:http>
    
    <bean id="sessionCreationStrategy" class="com.jacada.jad.security.AuthenticatedSessionStrategy">

    </bean>
  <!--
  	<bean id="authenticationProcessingFilter" class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
        <property name="allowSessionCreation" value="false"/>
        <property name="authenticationManager" ref="authenticationManager"/>
    </bean>
 -->
    <bean name="failureHandler" class="com.jacada.jad.security.LoginFormURLAuthenticationFailureHandler">
        <property name="defaultFailureUrl" value="/LoginForm.jsp?login_error=1"/>
        <property name="useForward" value="true"/>
        <property name="allowSessionCreation" value="false"/>
    </bean>

    <bean name="successHandler" class="com.jacada.jad.security.web.authentication.JacadaSavedRequestAwareAuthenticationSuccessHandler">
    	<property name="redirectStrategy" ref="redirectStrategy"/>
    	<property name="useReferer" value="true"/>
        <property name="targetUrlParameter" value="spring-security-redirect"/>
    </bean>

    <alias name="authenticationProcessingFilter" alias="AUTHENTICATION_PROCESSING_FILTER"/>

     <!-- Set to true to force login form access to be via https. -->
    <bean id="authenticationProcessingFilterEntryPoint" class="com.jacada.jad.security.JacadaAuthenticationEntryPoint">
        <property name="forceHttps" value="false" />
        <property name="useForward" value="true" />
        <property name="loginFormUrl" value="/LoginForm.jsp"/>
        <property name="portMapper">
            <bean class="org.springframework.security.web.PortMapperImpl">
                <property name="portMappings">
                    <map>
                        <entry key="80">
                            <value>443</value>
                        </entry>
                        <entry key="8080">
                            <value>8443</value>
                        </entry>
                        <entry key-ref="httpsPort" value-ref="httpsPort"/>
                    </map>
                </property>
            </bean>
        </property>        
        <!--
        <property name="redirectStrategy" ref="redirectStrategy"></property>
         -->
    </bean>
   
    
	
	<bean id="redirectStrategy" class="com.jacada.jad.security.IgnoreURLParamsRedirectStrategy"> 
		<property name="contextRelative" value="true"/>
	</bean>
    
    <!--
    Simple concrete implementation of AccessDecisionManager that
    grants access if any AccessDecisionVoter returns an affirmative response.
    -->
    <bean id="businessAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="true"/>
        <property name="decisionVoters">
            <list>
                <ref bean="roleVoter"/>
            </list>
        </property>
    </bean>

    <!--
    Votes to grant access if there is an exact matching GrantedAuthority to a ConfigAttribute starting with the role prefix.
    Votes to deny access if there is no exact matching GrantedAuthority to a ConfigAttribute starting with the role prefix.
    -->
    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
        <property name="rolePrefix" value=""/>
    </bean>


	<s:authentication-manager alias="authenticationManager" erase-credentials="false">
		<s:authentication-provider ref="authenticationProvider"></s:authentication-provider>
	</s:authentication-manager>
    <bean id="authenticationProvider" class="com.jacada.jad.rap.provider.StrategyAuthenticationProvider" lazy-init="true">				
		<property name="mode" ref="securityMode" />
		<property name="standaloneAuthenticationProvider" ref="daoAuthenticationProvider"/>
		<property name="externalAuthenticationProvider" ref="ldapAuthenticationProvider"/>
    </bean>

    <!--
    An AuthenticationProvider implementation that retrieves user details from an UserDetailsService.
    -->
    <bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider" lazy-init="true">
		<property name="userDetailsService" ref="userDetailsService"></property>
    </bean>
    <bean id="userDetailsService" class="com.jacada.jad.rap.provider.JpaUserDetailsManager">
    	<property name="rapDao" ref="rapDao" />
    	<property name="ciphering" ref="ciphering" />
    </bean>
    
      <bean id="contextSource" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
        <constructor-arg ref="ldapUrl"/>
        <property name="userDn" ref="ldapUsername"/>  
        <property name="password" ref="ldapPassword"/>
        <property name="base" ref="ldapBasedn"/>
        <property name="pooled" value="true" />
    </bean>

    <!--
    An AuthenticationProvider implementation that authenticates against an LDAP server.
    -->
    <bean id="ldapAuthenticationProvider" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider" lazy-init="true">
		<constructor-arg ref="bindAuthenticator"/>
		<constructor-arg ref="workspaceLdapAuthoritiesPopulator"/>
    </bean>
    
    <bean id="bindAuthenticator" class="org.springframework.security.ldap.authentication.BindAuthenticator">
        <constructor-arg ref="contextSource" />
        <property name="userSearch" ref="userSearch"/>
    </bean>
    <bean id="workspaceLdapAuthoritiesPopulator" class="com.jacada.jad.rap.ldap.populator.WorkspaceLdapAuthoritiesPopulator">
        <constructor-arg ref="externalUsersManager"/>
        <constructor-arg ref="rapDao"/>
		<property name="expertsInfoProvider" ref="expertsInfoProvider" />
    </bean>
    
					<bean id="userSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
					  <constructor-arg index="0" ref="userSearchBase"/>
					  <constructor-arg index="1" ref="ldapSearchFilter"/>
					  <constructor-arg index="2" ref="contextSource" />
					</bean>				

    <bean id="securityMode" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="mode" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.SecuritySetting" />
    </bean>
  
    <bean id="httpsPort" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="httpsPort" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.SecuritySetting" />
    </bean>

    <bean id="ldapUrl" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="url" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>

    <bean id="ldapBasedn" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="basedn" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>

    <bean id="ldapUsername" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="username" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
     <bean id="ldapPassword" class="com.jacada.jad.configuration.settings.DecryptedSettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="password" />
    	<property name="ciphering" ref="ciphering" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
    <bean id="ldapSearchFilter" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="searchFilter" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
    <bean id="ldapGroupCommonName" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="groupCommonName" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>

    <bean id="userSearchBase" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="userSearchBase" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>

    <bean id="groupSearchBase" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="groupSearchBase" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>

   <bean id="memberOfAttributeUser" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="memberOfAttributeUser" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
    <bean id="memberOfAttributeGroup" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="memberOfAttributeGroup" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
    <bean id="userObjectClassName" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="userObjectClassName" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
    <bean id="groupObjectClassName" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="groupObjectClassName" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
    <bean id="userCommonName" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="userCommonName" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
    <bean id="userMailAttributeName" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="userMailAttributeName" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
    <bean id="userDisplayName" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="userDisplayName" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>

    <bean id="userSurname" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="userSurname" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>

   <bean id="ldapInfoProvider" class="com.jacada.jad.rap.external.provider.LdapInfoProvider">
        <property name="ldapTemplate" ref="ldapTemplate" />
        <property name="ldapSearch" ref="userSearch"/>
        <property name="memberOfAttributeUser" ref="memberOfAttributeUser" />
        <property name="memberOfAttributeGroup" ref="memberOfAttributeGroup" />
        <property name="userObjectClassName" ref="userObjectClassName" />
        <property name="groupObjectClassName" ref="groupObjectClassName" />
        <property name="baseUser" ref="userSearchBase" />
        <property name="baseGroup" ref="groupSearchBase" />
        <property name="commonName" ref="userCommonName" />
        <property name="userSurname" ref="userSurname" />
        <property name="userMailAttributeName" ref="userMailAttributeName" />
        <property name="groupCommonName" ref="ldapGroupCommonName"/>
        <property name="userDisplayName" ref="userDisplayName"/>
		<property name="pageSize" value="1000" />	
		<property name="depth" ref="groupSearchDepth"/>
		<property name="cache" ref="groupsCache"/>
		<property name="userCache" ref="userCache"/>
    </bean>
	 
	<bean id="groupSearchDepth" class="com.jacada.jad.configuration.settings.SettingsProvider"  lazy-init="true">
    	<property name="settingsDao" ref="settingsDao" />
    	<property name="settingName" value="groupSearchDepth" />
    	<property name="settingType" value="com.jacada.jad.rap.settings.LDAPSetting" />
    </bean>
    
    <bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
      <constructor-arg ref="contextSource" />
   </bean>
   
   <bean id="usersManager" class="com.jacada.jad.rap.provider.UsersManagerFactoryBean">
   		<property name="standaloneUsersManager" ref="standaloneUsersManager"/>
   		<property name="externalUsersManager" ref="externalUsersManager"/>
   		<property name="mode" ref="securityMode" />   		
   </bean>
    
   <bean id="standaloneUsersManager" class="com.jacada.jad.rap.provider.StandaloneUsersManager">
   		<property name="rapDao" ref="rapDao" />
   </bean>
    
   <bean id="externalUsersManager" class="com.jacada.jad.rap.provider.ExternalUserManager">
   		<property name="rapDao" ref="rapDao"/>
   		<property name="externalInfoProvider" ref="ldapInfoProvider"/>
   </bean>

   <bean id="authorization" class="com.jacada.jad.rap.provider.AuthorizationProvider" scope="session">
        <aop:scoped-proxy/>
        <property name="rapDao" ref="rapDao"/>        
   </bean>
   
   <bean id="expertsInfoProvider" class="com.jacada.jad.rap.provider.ExpertsInfoProviderImpl" scope="session" lazy-init="true">
		<aop:scoped-proxy/>
		<property name="rapDao" ref="rapDao" />
		<property name="usersManager" ref="usersManager" />
	</bean>
	
	<bean id="peersInfoProvider" class="com.jacada.jad.rap.provider.PeersInfoProviderImpl"  scope="session" lazy-init="true" >
		<aop:scoped-proxy/>
		<property name="rapDao" ref="rapDao" />
		<property name="usersManager" ref="usersManager" />
    </bean>	
     
    <bean id="groupsCache" class="com.jacada.jad.rap.external.provider.cache.EhCacheBasedGroupCache" lazy-init="true">
    	<property name="cache">
        	<bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
          		<property name="cacheManager" ref="ehcacheCacheManager"/>            		          		
          		<property name="cacheName" value="ldapGroups"/>
        	</bean>
      	</property>
    </bean>
    <bean id="userCache" class="com.jacada.jad.rap.external.provider.cache.EhCacheBasedUserCache" lazy-init="true">
    	<property name="cache">
        	<bean class="org.springframework.cache.ehcache.EhCacheFactoryBean">
          		<property name="cacheManager" ref="ehcacheCacheManager"/>            		          		
          		<property name="cacheName" value="ldapUsers"/>
        	</bean>
      	</property>
    </bean>
    
</beans>